// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    Mux16(a=x, b=false, sel=zx, out=tempx);
    Not16(in=tempx, out=tempnotx);
    Mux16(a=tempx, b=tempnotx, sel=nx, out=ox);

    Mux16(a=y, b=false, sel=zy, out=tempy);
    Not16(in=tempy, out=tempnoty);
    Mux16(a=tempy, b=tempnoty, sel=ny, out=oy);

    Add16(a=ox, b=oy, out=xpy);
    And16(a=ox, b=oy, out=xay);
    Mux16(a=xay, b=xpy, sel=f, out=tempout);

    Not16(in=tempout, out=tempnotout);
    Mux16(a=tempout, b=tempnotout, sel=no, out=out, out=oout);

    // Mux(a=false, b=true, sel=oout[15], out=ng);
    IsNg(in=oout, out=ng);

    // Or(a=oout[0], b=oout[1], out=out1);
    // Or(a=out01, b=oout[2], out=out012);
    // Or(a=out012, b=oout[3], out=out0123);
    // Or(a=out0123, b=oout[4], out=out01234);
    // Or(a=out01234, b=oout[5], out=out012345);
    // Or(a=out012345, b=out[6], out=out0123456);
    // Or(a=out0123456, b=oout[7], out=out01234567);
    // Or(a=out01234567, b=oout[8], out=out012345678);
    // Or(a=out012345678, b=oout[9], out=out0123456789);
    // Or(a=out0123456789, b=oout[10], out=out012345678910);
    // Or(a=out012345678910, b=oout[11], out=out01234567891011);
    // Or(a=out01234567891011, b=oout[12], out=out0123456789101112);
    // Or(a=out0123456789101112, b=oout[13], out=out012345678910111213);
    // Or(a=out012345678910111213, b=oout[14], out=out01234567891011121314);
    // Or(a=out01234567891011121314, b=oout[15], out=out0123456789101112131415);
    Or16To1(in=oout, out=out0123456789101112131415);
    Mux(a=true, b=false, sel=out0123456789101112131415, out=zr);

   // Put you code here:
}